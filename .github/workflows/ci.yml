name: CI Build All Services

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20"
  JAVA_VERSION: "21"
  PYTHON_VERSION: "3.11"

jobs:
  # Build Frontend Service
  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Update npm to latest version
        run: npm install -g npm@latest

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"

          if [ -f "package-lock.json" ]; then
            echo "package-lock.json found, attempting npm ci"
            if ! npm ci; then
              echo "npm ci failed, falling back to npm install"
              rm -f package-lock.json
              npm install
            fi
          else
            echo "package-lock.json not found, using npm install"
            npm install
          fi

      - name: Build frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 1

  # Build User Appointment Service (Java Spring Boot)
  build-user-appointment-service:
    runs-on: ubuntu-latest

    env:
      JWT_SECRET: test_jwt_secret_for_ci_only_minimum_32_characters_long_enough

    defaults:
      run:
        working-directory: user-appointment-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('user-appointment-service/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup Maven wrapper
        run: |
          chmod +x ./setup-maven.sh
          ./setup-maven.sh

      - name: Build with Maven
        run: |
          export JAVA_HOME=$JAVA_HOME
          if [ -f "./mvnw" ] && [ -x "./mvnw" ] && [ -f ".mvn/wrapper/maven-wrapper.properties" ]; then
            echo "Using Maven wrapper"
            ./mvnw clean compile -B --quiet -DskipTests
          else
            echo "Using system Maven"
            mvn clean compile -B --quiet -DskipTests
          fi

  # Build AI Service (Python FastAPI)
  build-ai-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ai-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: ai-service/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify AI Service
        env:
          OPENAI_API_KEY: test_key_for_ci
        run: |
          python -c "import main; print('AI Service imports successfully')"
